{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///formly.min.js","webpack:///webpack/bootstrap be673afa7d4ed98dd505","webpack:///./index.js","webpack:///./angular-fix/index.js","webpack:///./directives/formly-custom-validation.js","webpack:///./directives/formly-dynamic-name.js","webpack:///./directives/formly-field.js","webpack:///./directives/formly-form.js","webpack:///./directives/index.js","webpack:///./providers/formlyConfig.js","webpack:///./providers/formlyErrorAndWarningsUrlPrefix.js","webpack:///./providers/formlyUsability.js","webpack:///./providers/formlyVersion.js","webpack:///./providers/index.js","webpack:///./services/formlyUtil.js","webpack:///./services/formlyWarn.js","webpack:///./services/index.js","webpack:///./directives/formly-form.html","webpack:///external \"angular\""],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_16__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","ngModuleName","angular","ngModule","version","window","directive","formlyUtil","link","scope","el","attrs","ctrl","validators","$eval","formlyCustomValidation","hasValidators","hasOwnProperty","forEach","validator","name","validatorCollection","isAsync","modelValue","viewValue","formlyEval","$parsers","unshift","isValid","$modelValue","$setValidity","restrict","priority","controller","$scope","$element","$attrs","removeAttr","$set","formlyDynamicName","formlyField","$http","$q","$compile","$templateCache","formlyConfig","formlyUsability","formlyWarn","asHtml","wrapper","element","append","html","getTemplate","options","template","type","templateUrl","getTemplateUrl","when","httpOptions","cache","get","then","response","data","error","getFieldError","transcludeInWrapper","templateWrapper","getTemplateWrapperOption","doTransclusion","wrapperEl","transcludeEl","find","replaceWith","checkWrapper","checkWrapperTemplate","url","JSON","stringify","templateOption","getTemplateWrapper","getTemplateWrapperByType","apiCheck","getTemplateOptionsCount","templateOptions","isDefined","transclude","model","formId","index","fields","form","$interval","runExpressions","field","currentValue","valueGetterSetter","expressionProperties","expression","prop","dataExpression","dataProp","newVal","key","setFormControl","cleanUp","stopWaitingForDestroy","cancel","interval","maxTime","intervalTime","iterations","formControl","$on","getFieldId","extend","value","modelOptions","getterSetter","allowInvalid","noFormControl","$watch","setElementTemplate","templateEl","contents","tests","$inject","_toArray","arr","Array","isArray","from","_slice","prototype","slice","formlyForm","currentFormId","replace","attachKey","setupWatchers","watcher","watchers","listener","watchExpression","getWatchExpression","watchListener","getWatchListener","stopWatching","watchDeep","isFunction","originalExpression","args","modifyArgs","apply","undefined","concat","arguments","displayName","originalListener","_len","length","originalArgs","_key","newResult","getFormlyError","formlyUsabilityProvider","setTemplateUrl","validateSetterApi","checkOverwrite","templateUrlMap","setTemplate","templateMap","templateOrUrl","isUrl","templatesName","isObject","isString","setTemplateWrapper","map","types","getOptionsTypes","getOptionsName","checkTemplateWrapperAPI","templateWrappersMap","join","defaultTemplateWrapperName","checkTemplateWrapperTypes","shouldThrow","every","wrapperWithSameType","some","property","object","newValue","objectName","_this","disableWarnings","console","warn","indexOf","_this2","$get","provider","constant","errorInfoSlug","message","Error","getErrorMessage","toJson","errorsAndWarningsUrlPrefix","additionalInfo","formlyTransclude","$viewValue","formlyErrorAndWarningsUrlPrefix","$log","warnInfoSlug","shift","push"],"mappings":";;CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,EAAAG,QAAA,YACA,kBAAAC,gBAAAC,IACAD,QAAA,WAAAJ,GACA,gBAAAC,SACAA,QAAA,SAAAD,EAAAG,QAAA,YAEAJ,EAAA,SAAAC,EAAAD,EAAA,UACCO,KAAA,SAAAC,GACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAT,OAGA,IAAAC,GAAAS,EAAAD,IACAT,WACAW,GAAAF,EACAG,QAAA,EAUA,OANAL,GAAAE,GAAAI,KAAAZ,EAAAD,QAAAC,IAAAD,QAAAQ,GAGAP,EAAAW,QAAA,EAGAX,EAAAD,QAvBA,GAAAU,KAqCA,OATAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,GAGAR,EAAA,KDgBM,SAASP,EAAQD,EAASQ,GEtDhC,YAEA,IAAAS,GAAA,SAEAC,EAAAV,EAAA,GACAW,EAAAD,EAAAjB,OAAAgB,KAEAT,GAAA,IAAAW,GACAX,EAAA,IAAAW,GACAX,EAAA,GAAAW,GAEAlB,EAAAD,QAAAiB,GF4DM,SAAShB,EAAQD,EAASQ,GGvEhC,YAIA,IAAAU,GAAAV,EAAA,GACAU,GAAAE,UACAF,EAAAG,OAAAH,SAEAjB,EAAAD,QAAAkB,GH6EM,SAASjB,GIrFf,YAEAA,GAAAD,QAAA,SAAAmB,GACAA,EAAAG,UAAA,gDAAAC,GACA,OACArB,QAAA,UACAsB,KAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,GAAAC,GAAAJ,EAAAK,MAAAH,EAAAI,uBACA,IAAAF,EAAA,CAKA,GAAAG,GAAAJ,EAAAK,eAAA,cACAf,SAAAgB,QAAAL,EAAA,SAAAM,EAAAC,GACA,GAAAJ,EAAA,CACA,GAAAK,GAAAF,EAAAG,QAAA,gCACAV,GAAAS,GAAAD,GAAA,SAAAG,EAAAC,GACA,MAAAjB,GAAAkB,WAAAhB,EAAAU,EAAAI,EAAAC,QAGAZ,GAAAc,SAAAC,QAAA,SAAAH,GACA,GAAAI,GAAArB,EAAAkB,WAAAhB,EAAAU,EAAAP,EAAAiB,YAAAL,EAEA,OADAZ,GAAAkB,aAAAV,EAAAQ,GACAJ,cJkGM,SAASvC,GK1Hf,YAEAA,GAAAD,QAAA,SAAAmB,GACAA,EAAAG,UAAA,+BACA,OACAyB,SAAA,IACAC,SAAA,IACAC,YAAA,sCAAAC,EAAAC,EAAAC,GACAD,EAAAE,WAAA,uBACAD,EAAAE,KAAA,OAAAJ,EAAApB,MAAAsB,EAAAG,0BACAH,GAAAG,yBLoIM,SAAStD,EAAQD,EAASQ,GM9IhC,YAEA,IAAAU,GAAAV,EAAA,EAEAP,GAAAD,QAAA,SAAAmB,GAKA,QAAAqC,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAtC,EAAAuC,EAAAC,GAoGA,QAAAC,GAAAtC,GACA,GAAAuC,GAAA/C,EAAAgD,QAAA,UACA,OAAAD,GAAAE,OAAAzC,GAAA0C,OAIA,QAAAC,GAAAC,GACA,GAAAC,GAAAD,EAAAC,UAAAV,EAAAQ,YAAAC,EAAAE,MACAC,EAAAH,EAAAG,aAAAZ,EAAAa,eAAAJ,EAAAE,KACA,IAAAD,EACA,MAAAb,GAAAiB,KAAAJ,EACO,IAAAE,EAAA,CACP,GAAAG,IAA2BC,MAAAjB,EAC3B,OAAAH,GAAAqB,IAAAL,EAAAG,GAAAG,KAAA,SAAAC,GACA,MAAAA,GAAAC,OACS,kBAAAC,GACTnB,EAAA,2EAAAU,EAAAS,KAGA,KAAApB,GAAAqB,cAAA,qDAAAb,EAAAE,KAAA,+BAAAF,GAIA,QAAAc,GAAAd,GACA,GAAAe,GAAAC,EAAAhB,EAEA,iBAAAC,GAmBA,QAAAgB,GAAAtB,GACA,GAAAuB,GAAAtE,EAAAgD,QAAAD,GACAwB,EAAAD,EAAAE,KAAA,oBAEA,OADAD,GAAAE,YAAApB,GACAiB,EAtBA,IAAAH,EACA,MAAA3B,GAAAiB,KAAAzD,EAAAgD,QAAAK,GAGA,IADAT,EAAA8B,aAAAP,GACAA,EAAAd,SAEA,MADAT,GAAA+B,qBAAAR,EAAAd,SAAAc,GACA3B,EAAAiB,KAAAY,EAAAF,EAAAd,UAEA,IAAAK,IAA6BC,MAAAjB,EAC7B,OAAAH,GAAAqB,IAAAO,EAAAS,IAAAlB,GAAAG,KAAA,SAAAC,GACA,GAAAf,GAAAe,EAAAC,IAEA,OADAnB,GAAA+B,qBAAA5B,EAAAoB,GACAE,EAAAtB,KACW,kBAAAiB,GACXnB,EAAA,8EAAAgC,KAAAC,UAAAX,GAAAH,MAaA,QAAAI,GAAAhB,GAEA,GAAA2B,GAAA3B,EAAAL,OAEA,WAAAgC,EACA,QAEA,IAAAZ,GAAAY,CAQA,OANAA,GAEO,gBAAAA,KAEPZ,EAAAxB,EAAAqC,mBAAAD,IAHAZ,EAAAxB,EAAAsC,yBAAA7B,EAAAE,OAAAX,EAAAqC,qBAKAb,EAGA,QAAAe,GAAA9B,GAQA,QAAA+B,GAAA/B,GACA,GAAAgC,GAAA,CAIA,OAHAA,IAAApF,EAAAqF,UAAAjC,EAAAC,UAAA,IACA+B,GAAApF,EAAAqF,UAAAjC,EAAAE,MAAA,IACA8B,GAAApF,EAAAqF,UAAAjC,EAAAG,aAAA,IAXA,GAAA6B,GAAAD,EAAA/B,EACA,QAAAgC,EACA,KAAAxC,GAAAqB,cAAA,wIAAAb,EACO,IAAAgC,EAAA,EACP,KAAAxC,GAAAqB,cAAA,wIAAAb,GAhLA,OACAvB,SAAA,KACAyD,YAAA,EACA/E,OACA6C,QAAA,IACAmC,MAAA,IACAC,OAAA,KACAC,MAAA,KACAC,OAAA,KACAC,KAAA,MAEA5D,YAAA,8BAAAC,EAAA4D,GAyBA,QAAAC,KACA,GAAAC,GAAA9D,EAAAoB,QACA2C,EAAAC,GACAhG,GAAAgB,QAAA8E,EAAAG,qBAAA,SAAAC,EAAAC,GACA,SAAAA,EACAL,EAAAK,GAAA9F,EAAAkB,WAAAS,EAAAkE,EAAAH,IAEAD,EAAA/B,KAAA+B,EAAA/B,SACA/D,EAAAgB,QAAA8E,EAAAG,qBAAAlC,KAAA,SAAAqC,EAAAC,GACAP,EAAA/B,KAAAsC,GAAAhG,EAAAkB,WAAAS,EAAAoE,EAAAL,QAMA,QAAAC,GAAAM,GACA,MAAAtE,GAAAuD,OAAAvD,EAAAoB,QAAAmD,KAGAvG,EAAAqF,UAAAiB,KACAtE,EAAAuD,MAAAvD,EAAAoB,QAAAmD,KAAAD,GAEAtE,EAAAuD,MAAAvD,EAAAoB,QAAAmD,MANA,OASA,QAAAC,KAqBA,QAAAC,KACAC,IACAd,EAAAe,OAAAC,GAtBA,GAAAF,GACAG,EAAA,IACAC,EAAA,EACAC,EAAA,EACAH,EAAAhB,EAAA,WAEA,GADAmB,KACA/G,EAAAqF,UAAArD,EAAAoB,QAAAmD,KACA,MAAAE,IAEA,IAAAO,GAAAhF,EAAA2D,MAAA3D,EAAA2D,KAAA3D,EAAAvC,GACAuH,IACAhF,EAAAoB,QAAA4D,cACAP,KACaK,EAAAC,EAAAF,IACbhE,EAAA,iFAAAgE,EAAA,KAAA7E,GACAyE,MAEWK,EACXJ,GAAA1E,EAAAiF,IAAA,WAAAR,GAnEAzE,EAAAvC,GAAAY,EAAA6G,WAAAlF,EAAAwD,OAAAxD,EAAAoB,QAAApB,EAAAyD,OAEAzF,EAAAmH,OAAAnF,EAAAoB,SAEAmD,IAAAvE,EAAAoB,QAAAmD,KAAAvE,EAAAyD,OAAA,EACA2B,MAAApB,EACAH,iBACAwB,cACAC,cAAA,EACAC,cAAA,KAKA1B,IACA7D,EAAAoB,QAAAoE,eACAhB,IAEAxE,EAAAoB,QAAAmC,OACAvD,EAAAyF,OAAA,gBAAA5B,GAAA,KAwDAvF,KAAA,SAAAC,EAAAC,GAIA,QAAAkH,GAAAC,GACAnH,EAAA0C,KAAAJ,EAAA6E,IACAlF,EAAAjC,EAAAoH,YAAArH,GALA2E,EAAA3E,EAAA6C,SACAD,EAAA5C,EAAA6C,SAAAS,KAAAK,EAAA3D,EAAA6C,UAAAS,KAAA6D,KA/FAzH,EAAAG,UAAA,cAAAkC,GAEAA,EAAAuF,MAAA,KA+LAvF,EAAAwF,SAAA,uGNqJM,SAAS/I,EAAQD,EAASQ,GO3VhC,YAEA,IAAAyI,GAAA,SAAAC,GAA+B,MAAAC,OAAAC,QAAAF,KAAAC,MAAAE,KAAAH,IAE/BI,EAAAH,MAAAI,UAAAC,MACAtI,EAAAV,EAAA,EAEAP,GAAAD,QAAA,SAAAmB,GAKA,QAAAsI,GAAA3F,GACA,GAAA4F,GAAA,CACA,QACA3G,SAAA,IACAwB,SAAA/D,EAAA,IACAmJ,SAAA,EACAnD,YAAA,EACA/E,OACAmF,OAAA,IACAH,MAAA,KACAI,KAAA,MAEA5D,YAAA,kBAAAC,GAcA,QAAA0G,GAAA5C,EAAAL,GACAK,EAAAS,IAAAT,EAAAS,KAAAd,GAAA,EAGA,QAAAkD,GAAA7C,EAAAL,GACA,GAAAzF,EAAAqF,UAAAS,EAAA8C,SAAA,CAGA,GAAAC,GAAA/C,EAAA8C,OACA5I,GAAAkI,QAAAW,KACAA,OAEA7I,EAAAgB,QAAA6H,EAAA,SAAAD,GACA,IAAA5I,EAAAqF,UAAAuD,EAAAE,UACA,KAAAlG,GAAAqB,cAAA,oFAAA6B,EAEA,IAAAiD,GAAAC,EAAAJ,EAAA9C,EAAAL,GACAwD,EAAAC,EAAAN,EAAA9C,EAAAL,GAEAnC,EAAAsF,EAAAtF,MAAA,QACAsF,GAAAO,aAAAnH,EAAAsB,GAAAyF,EAAAE,EAAAL,EAAAQ,cAIA,QAAAJ,GAAAJ,EAAA9C,EAAAL,GACA,GAAAsD,GAAAH,EAAA1C,YAAA,UAAAJ,EAAAS,IAAA,IACA,IAAAvG,EAAAqJ,WAAAN,GAAA,CAGA,GAAAO,GAAAP,CACAA,GAAA,WACA,GAAAQ,GAAAC,EAAAC,MAAAC,QAAAd,EAAAnD,GAAAkE,OAAAvB,EAAAzI,KAAAiK,YACA,OAAAN,GAAAG,MAAAC,OAAA3B,EAAAwB,KAEAR,EAAAc,YAAA,yCAAA/D,EAAAS,IAEA,MAAAwC,GAGA,QAAAG,GAAAN,EAAA9C,EAAAL,GACA,GAAAwD,GAAAL,EAAAE,QACA,IAAA9I,EAAAqJ,WAAAJ,GAAA,CAGA,GAAAa,GAAAb,CACAA,GAAA,WACA,GAAAM,GAAAC,EAAAC,MAAAC,QAAAd,EAAAnD,GAAAkE,OAAAvB,EAAAzI,KAAAiK,YACA,OAAAE,GAAAL,MAAAC,OAAA3B,EAAAwB,KAEAN,EAAAY,YAAA,uCAAA/D,EAAAS,IAEA,MAAA0C,GAGA,QAAAO,GAAAZ,EAAAnD,GACA,OAAAsE,GAAAH,UAAAI,OAAAC,EAAAhC,MAAA8B,EAAA,EAAAA,EAAA,KAAAG,EAAA,EAAoGH,EAAAG,EAAaA,IACjHD,EAAAC,EAAA,GAAAN,UAAAM,EAGA,QAAAlI,EAAA0D,OAAAD,IAAAkE,OAAA5B,EAAAkC,IAAArB,EAAAO,eAxEAnH,EAAAwD,OAAA,UAAAgD,IAEAxI,EAAAgB,QAAAgB,EAAA0D,OAAAgD,GACA1I,EAAAgB,QAAAgB,EAAA0D,OAAAiD,GAGA3G,EAAAyF,OAAA,iBAAA0C,GACAnK,EAAAgB,QAAAgB,EAAA0D,OAAA,SAAAI,GAEAA,EAAAD,gBAAAC,EAAAD,eAAAsE,OAES,KAgET7J,KAAA,SAAAC,EAAAC,EAAAC,GACA,GAAAA,EAAAM,eAAA,UACA,KAAA6B,GAAAwH,eAAA,kFAEA,aAAA3J,EAAAS,KAEA,KAAA0B,GAAAwH,eAAA,+EAEA,KAAA3J,EAAAM,eAAA,WAAAR,EAAAgF,MACA,KAAA3C,GAAAwH,eAAA,yDArGAnK,EAAAG,UAAA,aAAAmI,GAEAA,EAAAV,MAAA,KAwGAU,EAAAT,SAAA,qBPkWM,SAAS/I,EAAQD,EAASQ,GQpdhC,YAEAP,GAAAD,QAAA,SAAAmB,GACAX,EAAA,GAAAW,GACAX,EAAA,GAAAW,GACAX,EAAA,GAAAW,GACAX,EAAA,GAAAW,KR2dM,SAASlB,EAAQD,EAASQ,GSjehC,YAEA,IAAAU,GAAAV,EAAA,EAEAP,GAAAD,QAAA,SAAAmB,GAKA,QAAA0C,GAAA0H,GAwBA,QAAAC,GAAApJ,EAAAqC,GACAgH,EAAArJ,EAAAqC,GAAA,EAAAqG,WACA,gBAAA1I,IACAsJ,EAAAtJ,EAAAuJ,EAAAlH,EAAA,gBACAkH,EAAAvJ,GAAAqC,GAEAvD,EAAAgB,QAAAE,EAAA,SAAAqC,EAAArC,GACAoJ,EAAApJ,EAAAqC,KAKA,QAAAC,GAAAF,GACA,MAAAmH,GAAAnH,GAGA,QAAAoH,GAAAxJ,EAAAmC,GACAkH,EAAArJ,EAAAmC,GAAA,EAAAuG,WACA,gBAAA1I,IACAsJ,EAAAtJ,EAAAyJ,EAAAtH,EAAA,aACAsH,EAAAzJ,GAAAmC,GAEArD,EAAAgB,QAAAE,EAAA,SAAAmC,EAAAnC,GACAwJ,EAAAxJ,EAAAmC,KAKA,QAAAF,GAAAG,GACA,MAAAqH,GAAArH,GAGA,QAAAiH,GAAArJ,EAAA0J,EAAAC,EAAAtB,GACA,GAAAuB,GAAAD,EAAA,0BACA,KAAA7K,EAAA+K,SAAA7J,GAAA,CAGA,IAAAlB,EAAAgL,SAAA9J,GACA,KAAAmJ,GAAAD,eAAA,wCAAAU,EAAA,mBAAAjG,KAAAC,UAAAyE,GACO,KAAAvJ,EAAAgL,SAAAJ,GACP,KAAAP,GAAAD,eAAA,0CAAAU,EAAA,mBAAAjG,KAAAC,UAAAyE,KAIA,QAAA0B,GAAA7H,EAAAlC,GACA,MAAAlB,GAAAkI,QAAA9E,GACAA,EAAA8H,IAAAD,GACOjL,EAAA+K,SAAA3H,IACPA,EAAA+H,MAAAC,EAAAhI,GACAA,EAAAlC,KAAAmK,EAAAjI,EAAAlC,GACAoK,EAAAlI,GACAmI,EAAAnI,EAAAlC,MAAAkC,EACAA,GACOpD,EAAAgL,SAAA5H,GACP6H,GACA5H,SAAAD,EACAlC,SAHO,OAQP,QAAAkK,GAAAhI,GACA,MAAApD,GAAAgL,SAAA5H,EAAA+H,QACA/H,EAAA+H,OAEAnL,EAAAqF,UAAAjC,EAAA+H,OAGA/H,EAAA+H,SAIA,QAAAE,GAAAjI,EAAAlC,GACA,MAAAkC,GAAAlC,SAAAkC,EAAA+H,MAAAK,KAAA,MAAAC,EAGA,QAAAH,GAAAlI,GACAiH,EAAA3F,aAAAtB,GACAA,EAAAC,UACAgH,EAAA1F,qBAAAvB,EAAAC,SAAAD,GAEAoH,EAAApH,EAAAlC,KAAAqK,EAAAnI,EAAA,oBACAsI,EAAAtI,GAGA,QAAAsI,GAAAtI,GACA,GAAAuI,IAAA3L,EAAAkI,QAAA9E,EAAA+H,SAAA/H,EAAA+H,MAAAS,MAAA5L,EAAAgL,SACA,IAAAW,EACA,KAAAtB,GAAAD,eAAA,gGAEA,IAAAyB,GAAAzI,EAAA+H,MAAAW,KAAA7G,EACA,IAAA4G,EACA,KAAAxB,GAAAD,gBAAA,gIAAAvF,KAAAC,UAAA+G,GAAA,oBAAAhH,KAAAC,UAAA1B,IAAAoI,KAAA,MAIA,QAAAhB,GAAAuB,EAAAC,EAAAC,EAAAC,IACAC,EAAAC,iBAAAJ,EAAAjL,eAAAgL,IACAM,QAAAC,MAAA,2BAAAP,EAAA,OAAAG,EAAA,yBAAArH,KAAAC,UAAAkH,EAAAD,IAAA,SAAAlH,KAAAC,UAAAmH,IAAAT,KAAA,MAIA,QAAAxG,GAAA9D,GACA,MAAAqK,GAAArK,GAAAuK,GAGA,QAAAxG,GAAA3B,GACA,OAAApC,KAAAqK,GACA,GAAAA,EAAAxK,eAAAG,IACAqK,EAAArK,GAAAiK,OAAA,KAAAI,EAAArK,GAAAiK,MAAAoB,QAAAjJ,GACA,MAAAiI,GAAArK,GArIA,GAAAsL,GAAArN,KAGAsL,KACAE,KACAY,KACAE,EAAA,UACAU,EAAAhN,IAEAa,GAAAmH,OAAAhI,MACAqE,iBACA8G,iBACAnH,cACAuH,cACAO,qBACAjG,qBACAC,2BACAmH,iBAAA,EACAK,KAAA,WACA,MAAAD,MAxBAvM,EAAAyM,SAAA,eAAA/J,GAEAA,EAAAkF,MAAA,KA+IAlF,EAAAmF,SAAA,6BTweM,SAAS/I,GU9nBf,YAEAA,GAAAD,QAAA,SAAAmB,GACAA,EAAA0M,SAAA,6GVqoBM,SAAS5N,EAAQD,EAASQ,GWxoBhC,YAEA,IAAAU,GAAAV,EAAA,EAEAP,GAAAD,QAAA,SAAAmB,GACAA,EAAAyM,SAAA,6BAaA,QAAAzI,GAAA2I,EAAAC,EAAA/G,GACA,UAAAgH,OAAAC,EAAAH,EAAAC,IAAA,sBAAA7M,EAAAgN,OAAAlH,KAGA,QAAAsE,GAAAwC,EAAAC,GAKA,MAJAA,KACAA,EAAAD,EACAA,EAAA,MAEA,GAAAE,OAAAC,EAAAH,EAAAC,IAGA,QAAAE,GAAAH,EAAAC,GACA,GAAAjI,GAAA,EAIA,OAHA,QAAAgI,IACAhI,EAAA,GAAAqI,EAAAL,GAEA,iBAAAC,EAAA,KAAAjI,EAGA,QAAAF,GAAA3B,GACA,GAAAA,EAAAM,UAAAN,EAAA6B,IACA,KAAAwF,GAAA,gFAAAvF,KAAAC,UAAA/B,GAEA,KAAAA,EAAAM,WAAAN,EAAA6B,IACA,KAAAwF,GAAA,sFAAAvF,KAAAC,UAAA/B,IAIA,QAAA4B,GAAAtB,EAAA6J,GACA,GAAAC,GAAA,yCACA,SAAA9J,EAAAkJ,QAAAY,GACA,KAAA/C,GAAA,wCAAA+C,EAAA,gGAAA9J,EAAA,6BAAAwB,KAAAC,UAAAoI,IA5CA,GAAAf,GAAAhN,KACA8N,EAAA,uEACAjN,GAAAmH,OAAAhI,MACAiL,iBACAnG,gBACAS,eACAC,uBACA8H,KAAA,WACA,MAAAN,UXsrBM,SAASpN,GYpsBf,YAEAA,GAAAD,QAAA,SAAAmB,GACAA,EAAA0M,SAAA,2BZ2sBM,SAAS5N,EAAQD,EAASQ,Ga9sBhC,YAEAP,GAAAD,QAAA,SAAAmB,GACAX,EAAA,GAAAW,GACAX,EAAA,GAAAW,GACAX,EAAA,IAAAW,GACAX,EAAA,GAAAW,KbqtBM,SAASlB,EAAQD,EAASQ,Gc3tBhC,YAEA,IAAAU,GAAAV,EAAA,EAEAP,GAAAD,QAAA,SAAAmB,GACAA,EAAApB,QAAA,wBAMA,QAAA0C,GAAAhB,EAAA2F,EAAA7E,EAAAC,GACA,MAAAtB,GAAAqJ,WAAAnD,GACAA,EAAA5E,EAAAD,EAAAd,GAEAA,EAAAK,MAAAsF,GACAkH,WAAA9L,EACAK,YAAAN,IAKA,QAAA6F,GAAA1B,EAAApC,EAAAqC,GACA,GAAAnC,GAAAF,EAAAE,IAOA,QANAA,GAAAF,EAAAC,SACAC,EAAA,YACOA,GAAAF,EAAAG,cACPD,EAAA,gBAGAkC,EAAAlC,EAAAF,EAAAmD,IAAAd,GAAA+F,KAAA,KAxBA,OACAjK,aACA2F,kBd0vBM,SAASnI,GelwBf,YAEA,IAAAgJ,GAAA,SAAAC,GAA+B,MAAAC,OAAAC,QAAAF,KAAAC,MAAAE,KAAAH,GAE/BjJ,GAAAD,QAAA,SAAAmB,GACAA,EAAApB,QAAA,+EAAA8D,EAAA0K,EAAAC,GACA,kBACA,IAAA3K,EAAAyJ,gBAAA,CACA,GAAA7C,GAAAtB,MAAAI,UAAAC,MAAA3I,KAAAiK,WACA2D,EAAAhE,EAAAiE,OACAjE,GAAA9H,QAAA,mBACA8H,EAAAkE,KAAA,GAAAJ,EAAAE,GACAD,EAAAhB,KAAA7C,MAAA6D,EAAAvF,EAAAwB,Wf4wBM,SAASxK,EAAQD,EAASQ,GgBxxBhC,YAEAP,GAAAD,QAAA,SAAAmB,GACAX,EAAA,IAAAW,GACAX,EAAA,IAAAW,KhB+xBM,SAASlB,GiBnyBfA,EAAAD,QAAA,yZjByyBM,SAASC,GkBzyBfA,EAAAD,QAAAM","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ngFormly\"] = factory(require(\"angular\"));\n\telse\n\t\troot[\"ngFormly\"] = factory(root[\"angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_16__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ngFormly\"] = factory(require(\"angular\"));\n\telse\n\t\troot[\"ngFormly\"] = factory(root[\"angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_16__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar ngModuleName = \"formly\";\n\t\n\tvar angular = __webpack_require__(1);\n\tvar ngModule = angular.module(ngModuleName, []);\n\t\n\t__webpack_require__(11)(ngModule);\n\t__webpack_require__(14)(ngModule);\n\t__webpack_require__(6)(ngModule);\n\t\n\tmodule.exports = ngModuleName;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\t// some versions of angular don't export the angular module properly,\n\t// so we get it from window in this case.\n\tvar angular = __webpack_require__(16);\n\tif (!angular.version) {\n\t  angular = window.angular;\n\t}\n\tmodule.exports = angular;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.directive(\"formlyCustomValidation\", [\"formlyUtil\", function (formlyUtil) {\n\t    return {\n\t      require: \"ngModel\",\n\t      link: function (scope, el, attrs, ctrl) {\n\t        var validators = scope.$eval(attrs.formlyCustomValidation);\n\t        if (!validators) {\n\t          return;\n\t        }\n\t\n\t        // setup watchers and parsers\n\t        var hasValidators = ctrl.hasOwnProperty(\"$validators\");\n\t        angular.forEach(validators, function (validator, name) {\n\t          if (hasValidators) {\n\t            var validatorCollection = validator.isAsync ? \"$asyncValidators\" : \"$validators\";\n\t            ctrl[validatorCollection][name] = function (modelValue, viewValue) {\n\t              return formlyUtil.formlyEval(scope, validator, modelValue, viewValue);\n\t            };\n\t          } else {\n\t            ctrl.$parsers.unshift(function (viewValue) {\n\t              var isValid = formlyUtil.formlyEval(scope, validator, ctrl.$modelValue, viewValue);\n\t              ctrl.$setValidity(name, isValid);\n\t              return viewValue;\n\t            });\n\t          }\n\t        });\n\t      }\n\t    };\n\t  }]);\n\t};\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.directive(\"formlyDynamicName\", function formlyDynamicName() {\n\t    return {\n\t      restrict: \"A\",\n\t      priority: 599, // one after ngIf\n\t      controller: [\"$scope\", \"$element\", \"$attrs\", function ($scope, $element, $attrs) {\n\t        $element.removeAttr(\"formly-dynamic-name\");\n\t        $attrs.$set(\"name\", $scope.$eval($attrs.formlyDynamicName));\n\t        delete $attrs.formlyDynamicName;\n\t      }]\n\t    };\n\t  });\n\t};\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar angular = __webpack_require__(1);\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.directive(\"formlyField\", formlyField);\n\t\n\t  formlyField.tests = false ? require(\"./formly-field.test\")(ngModule) : null;\n\t\n\t  function formlyField($http, $q, $compile, $templateCache, formlyConfig, formlyUtil, formlyUsability, formlyWarn) {\n\t    return {\n\t      restrict: \"AE\",\n\t      transclude: true,\n\t      scope: {\n\t        options: \"=\",\n\t        model: \"=\",\n\t        formId: \"=?\",\n\t        index: \"=?\",\n\t        fields: \"=?\",\n\t        form: \"=?\"\n\t      },\n\t      controller: [\"$scope\", \"$interval\", function fieldController($scope, $interval) {\n\t        // set field id to link labels and fields\n\t        $scope.id = formlyUtil.getFieldId($scope.formId, $scope.options, $scope.index);\n\t\n\t        angular.extend($scope.options, {\n\t          // attach the key in case the formly-field directive is used directly\n\t          key: $scope.options.key || $scope.index || 0,\n\t          value: valueGetterSetter,\n\t          runExpressions: runExpressions,\n\t          modelOptions: {\n\t            getterSetter: true,\n\t            allowInvalid: true\n\t          }\n\t        });\n\t\n\t        // initalization\n\t        runExpressions();\n\t        if (!$scope.options.noFormControl) {\n\t          setFormControl();\n\t        }\n\t        if ($scope.options.model) {\n\t          $scope.$watch(\"options.model\", runExpressions, true);\n\t        }\n\t\n\t        // function definitions\n\t        function runExpressions() {\n\t          var field = $scope.options;\n\t          var currentValue = valueGetterSetter();\n\t          angular.forEach(field.expressionProperties, function runExpression(expression, prop) {\n\t            if (prop !== \"data\") {\n\t              field[prop] = formlyUtil.formlyEval($scope, expression, currentValue);\n\t            } else {\n\t              field.data = field.data || {};\n\t              angular.forEach(field.expressionProperties.data, function runExpression(dataExpression, dataProp) {\n\t                field.data[dataProp] = formlyUtil.formlyEval($scope, dataExpression, currentValue);\n\t              });\n\t            }\n\t          });\n\t        }\n\t\n\t        function valueGetterSetter(newVal) {\n\t          if (!$scope.model || !$scope.options.key) {\n\t            return;\n\t          }\n\t          if (angular.isDefined(newVal)) {\n\t            $scope.model[$scope.options.key] = newVal;\n\t          }\n\t          return $scope.model[$scope.options.key];\n\t        }\n\t\n\t        function setFormControl() {\n\t          var stopWaitingForDestroy;\n\t          var maxTime = 2000;\n\t          var intervalTime = 5;\n\t          var iterations = 0;\n\t          var interval = $interval(function () {\n\t            iterations++;\n\t            if (!angular.isDefined($scope.options.key)) {\n\t              return cleanUp();\n\t            }\n\t            var formControl = $scope.form && $scope.form[$scope.id];\n\t            if (formControl) {\n\t              $scope.options.formControl = formControl;\n\t              cleanUp();\n\t            } else if (intervalTime * iterations > maxTime) {\n\t              formlyWarn(\"couldnt-set-the-formcontrol-after-timems\", \"Couldn't set the formControl after \" + maxTime + \"ms\", $scope);\n\t              cleanUp();\n\t            }\n\t          }, intervalTime);\n\t          stopWaitingForDestroy = $scope.$on(\"$destroy\", cleanUp);\n\t\n\t          function cleanUp() {\n\t            stopWaitingForDestroy();\n\t            $interval.cancel(interval);\n\t          }\n\t        }\n\t      }],\n\t      link: function fieldLink(scope, el) {\n\t        apiCheck(scope.options);\n\t        getTemplate(scope.options).then(transcludeInWrapper(scope.options)).then(setElementTemplate);\n\t\n\t        function setElementTemplate(templateEl) {\n\t          el.html(asHtml(templateEl));\n\t          $compile(el.contents())(scope);\n\t        }\n\t      }\n\t    };\n\t\n\t    function asHtml(el) {\n\t      var wrapper = angular.element(\"<a></a>\");\n\t      return wrapper.append(el).html();\n\t    }\n\t\n\t\n\t    function getTemplate(options) {\n\t      var template = options.template || formlyConfig.getTemplate(options.type);\n\t      var templateUrl = options.templateUrl || formlyConfig.getTemplateUrl(options.type);\n\t      if (template) {\n\t        return $q.when(template);\n\t      } else if (templateUrl) {\n\t        var httpOptions = { cache: $templateCache };\n\t        return $http.get(templateUrl, httpOptions).then(function (response) {\n\t          return response.data;\n\t        })[\"catch\"](function (error) {\n\t          formlyWarn(\"problem-loading-template-for-templateurl\", \"Problem loading template for \" + templateUrl, error);\n\t        });\n\t      } else {\n\t        throw formlyUsability.getFieldError(\"template-type-type-not-supported\", \"template type '\" + options.type + \"' not supported. On element:\", options);\n\t      }\n\t    }\n\t\n\t    function transcludeInWrapper(options) {\n\t      var templateWrapper = getTemplateWrapperOption(options);\n\t\n\t      return function transcludeTemplate(template) {\n\t        if (!templateWrapper) {\n\t          return $q.when(angular.element(template));\n\t        }\n\t        formlyUsability.checkWrapper(templateWrapper);\n\t        if (templateWrapper.template) {\n\t          formlyUsability.checkWrapperTemplate(templateWrapper.template, templateWrapper);\n\t          return $q.when(doTransclusion(templateWrapper.template));\n\t        } else {\n\t          var httpOptions = { cache: $templateCache };\n\t          return $http.get(templateWrapper.url, httpOptions).then(function (response) {\n\t            var wrapper = response.data;\n\t            formlyUsability.checkWrapperTemplate(wrapper, templateWrapper);\n\t            return doTransclusion(wrapper);\n\t          })[\"catch\"](function (error) {\n\t            formlyWarn(\"proplem-loading-template-for-wrapper\", \"Problem loading template for wrapper\" + JSON.stringify(templateWrapper), error);\n\t          });\n\t        }\n\t\n\t        function doTransclusion(wrapper) {\n\t          var wrapperEl = angular.element(wrapper);\n\t          var transcludeEl = wrapperEl.find(\"formly-transclude\");\n\t          transcludeEl.replaceWith(template);\n\t          return wrapperEl;\n\t        }\n\t      };\n\t    }\n\t\n\t    function getTemplateWrapperOption(options) {\n\t      /* jshint maxcomplexity:6 */\n\t      var templateOption = options.wrapper;\n\t      // explicit null means no wrapper\n\t      if (templateOption === null) {\n\t        return \"\";\n\t      }\n\t      var templateWrapper = templateOption;\n\t      // nothing specified means use the default wrapper for the type\n\t      if (!templateOption) {\n\t        templateWrapper = formlyConfig.getTemplateWrapperByType(options.type) || formlyConfig.getTemplateWrapper();\n\t      } else if (typeof templateOption === \"string\") {\n\t        // string means it's a type\n\t        templateWrapper = formlyConfig.getTemplateWrapper(templateOption);\n\t      }\n\t      return templateWrapper;\n\t    }\n\t\n\t    function apiCheck(options) {\n\t      var templateOptions = getTemplateOptionsCount(options);\n\t      if (templateOptions === 0) {\n\t        throw formlyUsability.getFieldError(\"you-must-provide-one-of-type-template-or-templateurl-for-a-field\", \"You must provide one of type, template, or templateUrl for a field\", options);\n\t      } else if (templateOptions > 1) {\n\t        throw formlyUsability.getFieldError(\"you-must-only-provide-a-type-template-or-templateurl-for-a-field\", \"You must only provide a type, template, or templateUrl for a field\", options);\n\t      }\n\t\n\t      function getTemplateOptionsCount(options) {\n\t        var templateOptions = 0;\n\t        templateOptions += angular.isDefined(options.template) ? 1 : 0;\n\t        templateOptions += angular.isDefined(options.type) ? 1 : 0;\n\t        templateOptions += angular.isDefined(options.templateUrl) ? 1 : 0;\n\t        return templateOptions;\n\t      }\n\t    }\n\t  }\n\t  formlyField.$inject = [\"$http\", \"$q\", \"$compile\", \"$templateCache\", \"formlyConfig\", \"formlyUtil\", \"formlyUsability\", \"formlyWarn\"];\n\t};\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _toArray = function (arr) { return Array.isArray(arr) ? arr : Array.from(arr); };\n\t\n\tvar _slice = Array.prototype.slice;\n\tvar angular = __webpack_require__(1);\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.directive(\"formlyForm\", formlyForm);\n\t\n\t  formlyForm.tests = false ? require(\"./formly-form.test\")(ngModule) : null;\n\t\n\t  function formlyForm(formlyUsability) {\n\t    var currentFormId = 1;\n\t    return {\n\t      restrict: \"E\",\n\t      template: __webpack_require__(15),\n\t      replace: true,\n\t      transclude: true,\n\t      scope: {\n\t        fields: \"=\",\n\t        model: \"=?\", // we'll do our own warning to help with migrations\n\t        form: \"=?\"\n\t      },\n\t      controller: [\"$scope\", function ($scope) {\n\t        $scope.formId = \"formly_\" + currentFormId++;\n\t\n\t        angular.forEach($scope.fields, attachKey); // attaches a key based on the index if a key isn't specified\n\t        angular.forEach($scope.fields, setupWatchers); // setup watchers for all fields\n\t\n\t        // watch the model and evaluate watch expressions that depend on it.\n\t        $scope.$watch(\"model\", function onResultUpdate(newResult) {\n\t          angular.forEach($scope.fields, function (field) {\n\t            /*jshint -W030 */\n\t            field.runExpressions && field.runExpressions(newResult);\n\t          });\n\t        }, true);\n\t\n\t        function attachKey(field, index) {\n\t          field.key = field.key || index || 0;\n\t        }\n\t\n\t        function setupWatchers(field, index) {\n\t          if (!angular.isDefined(field.watcher)) {\n\t            return;\n\t          }\n\t          var watchers = field.watcher;\n\t          if (!angular.isArray(watchers)) {\n\t            watchers = [watchers];\n\t          }\n\t          angular.forEach(watchers, function (watcher) {\n\t            if (!angular.isDefined(watcher.listener)) {\n\t              throw formlyUsability.getFieldError(\"all-field-watchers-must-have-a-listener\", \"All field watchers must have a listener\", field);\n\t            }\n\t            var watchExpression = getWatchExpression(watcher, field, index);\n\t            var watchListener = getWatchListener(watcher, field, index);\n\t\n\t            var type = watcher.type || \"$watch\";\n\t            watcher.stopWatching = $scope[type](watchExpression, watchListener, watcher.watchDeep);\n\t          });\n\t        }\n\t\n\t        function getWatchExpression(watcher, field, index) {\n\t          var watchExpression = watcher.expression || \"model['\" + field.key + \"']\";\n\t          if (angular.isFunction(watchExpression)) {\n\t            // wrap the field's watch expression so we can call it with the field as the first arg\n\t            // and the stop function as the last arg as a helper\n\t            var originalExpression = watchExpression;\n\t            watchExpression = function formlyWatchExpression() {\n\t              var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n\t              return originalExpression.apply(undefined, _toArray(args));\n\t            };\n\t            watchExpression.displayName = \"Formly Watch Expression for field for \" + field.key;\n\t          }\n\t          return watchExpression;\n\t        }\n\t\n\t        function getWatchListener(watcher, field, index) {\n\t          var watchListener = watcher.listener;\n\t          if (angular.isFunction(watchListener)) {\n\t            // wrap the field's watch listener so we can call it with the field as the first arg\n\t            // and the stop function as the last arg as a helper\n\t            var originalListener = watchListener;\n\t            watchListener = function formlyWatchListener() {\n\t              var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n\t              return originalListener.apply(undefined, _toArray(args));\n\t            };\n\t            watchListener.displayName = \"Formly Watch Listener for field for \" + field.key;\n\t          }\n\t          return watchListener;\n\t        }\n\t\n\t        function modifyArgs(watcher, index) {\n\t          for (var _len = arguments.length, originalArgs = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n\t            originalArgs[_key - 2] = arguments[_key];\n\t          }\n\t\n\t          return [$scope.fields[index]].concat(_toArray(originalArgs), [watcher.stopWatching]);\n\t        }\n\t      }],\n\t      link: function (scope, el, attrs) {\n\t        if (attrs.hasOwnProperty(\"result\")) {\n\t          throw formlyUsability.getFormlyError(\"The \\\"result\\\" attribute on a formly-form is no longer valid. Use \\\"model\\\" instead\");\n\t        }\n\t        if (attrs.name !== \"form\") {\n\t          // then they specified their own name\n\t          throw formlyUsability.getFormlyError(\"The \\\"name\\\" attribute on a formly-form is no longer valid. Use \\\"form\\\" instead\");\n\t        }\n\t        if (!attrs.hasOwnProperty(\"model\") || !scope.model) {\n\t          throw formlyUsability.getFormlyError(\"The \\\"model\\\" attribute is required on a formly-form.\");\n\t        }\n\t      }\n\t    };\n\t  }\n\t  formlyForm.$inject = [\"formlyUsability\"];\n\t};\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  __webpack_require__(2)(ngModule);\n\t  __webpack_require__(3)(ngModule);\n\t  __webpack_require__(4)(ngModule);\n\t  __webpack_require__(5)(ngModule);\n\t};\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar angular = __webpack_require__(1);\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.provider(\"formlyConfig\", formlyConfig);\n\t\n\t  formlyConfig.tests = false ? require(\"./formlyConfig.test\")(ngModule) : null;\n\t\n\t  function formlyConfig(formlyUsabilityProvider) {\n\t    var _this2 = this;\n\t\n\t\n\t    var templateUrlMap = {};\n\t    var templateMap = {};\n\t    var templateWrappersMap = {};\n\t    var defaultTemplateWrapperName = \"default\";\n\t    var _this = this;\n\t\n\t    angular.extend(this, {\n\t      getTemplateUrl: getTemplateUrl,\n\t      setTemplateUrl: setTemplateUrl,\n\t      getTemplate: getTemplate,\n\t      setTemplate: setTemplate,\n\t      setTemplateWrapper: setTemplateWrapper,\n\t      getTemplateWrapper: getTemplateWrapper,\n\t      getTemplateWrapperByType: getTemplateWrapperByType,\n\t      disableWarnings: false,\n\t      $get: function () {\n\t        return _this2;\n\t      }\n\t    });\n\t\n\t    function setTemplateUrl(name, templateUrl) {\n\t      validateSetterApi(name, templateUrl, false, arguments);\n\t      if (typeof name === \"string\") {\n\t        checkOverwrite(name, templateUrlMap, templateUrl, \"templateUrls\");\n\t        templateUrlMap[name] = templateUrl;\n\t      } else {\n\t        angular.forEach(name, function (templateUrl, name) {\n\t          setTemplateUrl(name, templateUrl);\n\t        });\n\t      }\n\t    }\n\t\n\t    function getTemplateUrl(type) {\n\t      return templateUrlMap[type];\n\t    }\n\t\n\t    function setTemplate(name, template) {\n\t      validateSetterApi(name, template, false, arguments);\n\t      if (typeof name === \"string\") {\n\t        checkOverwrite(name, templateMap, template, \"templates\");\n\t        templateMap[name] = template;\n\t      } else {\n\t        angular.forEach(name, function (template, name) {\n\t          setTemplate(name, template);\n\t        });\n\t      }\n\t    }\n\t\n\t    function getTemplate(type) {\n\t      return templateMap[type];\n\t    }\n\t\n\t    function validateSetterApi(name, templateOrUrl, isUrl, args) {\n\t      var templatesName = isUrl ? \"templateUrls\" : \"templates\";\n\t      if (angular.isObject(name)) {\n\t        return;\n\t      }\n\t      if (!angular.isString(name)) {\n\t        throw formlyUsabilityProvider.getFormlyError(null, \"You must provide a name for all \" + templatesName + \". You provided: \" + JSON.stringify(args));\n\t      } else if (!angular.isString(templateOrUrl)) {\n\t        throw formlyUsabilityProvider.getFormlyError(null, \"You must provide a string for all \" + templatesName + \". You provided: \" + JSON.stringify(args));\n\t      }\n\t    }\n\t\n\t    function setTemplateWrapper(options, name) {\n\t      if (angular.isArray(options)) {\n\t        return options.map(setTemplateWrapper);\n\t      } else if (angular.isObject(options)) {\n\t        options.types = getOptionsTypes(options);\n\t        options.name = getOptionsName(options, name);\n\t        checkTemplateWrapperAPI(options);\n\t        templateWrappersMap[options.name] = options;\n\t        return options;\n\t      } else if (angular.isString(options)) {\n\t        return setTemplateWrapper({\n\t          template: options,\n\t          name: name\n\t        });\n\t      }\n\t    }\n\t\n\t    function getOptionsTypes(options) {\n\t      if (angular.isString(options.types)) {\n\t        return [options.types];\n\t      }\n\t      if (!angular.isDefined(options.types)) {\n\t        return [];\n\t      } else {\n\t        return options.types;\n\t      }\n\t    }\n\t\n\t    function getOptionsName(options, name) {\n\t      return options.name || name || options.types.join(\" \") || defaultTemplateWrapperName;\n\t    }\n\t\n\t    function checkTemplateWrapperAPI(options) {\n\t      formlyUsabilityProvider.checkWrapper(options);\n\t      if (options.template) {\n\t        formlyUsabilityProvider.checkWrapperTemplate(options.template, options);\n\t      }\n\t      checkOverwrite(options.name, templateWrappersMap, options, \"templateWrappers\");\n\t      checkTemplateWrapperTypes(options);\n\t    }\n\t\n\t    function checkTemplateWrapperTypes(options) {\n\t      var shouldThrow = !angular.isArray(options.types) || !options.types.every(angular.isString);\n\t      if (shouldThrow) {\n\t        throw formlyUsabilityProvider.getFormlyError(\"Attempted to create a template wrapper with types that is not a string or an array of strings\");\n\t      }\n\t      var wrapperWithSameType = options.types.some(getTemplateWrapperByType);\n\t      if (wrapperWithSameType) {\n\t        throw formlyUsabilityProvider.getFormlyError([\"Attempted to create a template wrapper with types that have already been specified for another template.\", \"Original wrapper: \" + JSON.stringify(wrapperWithSameType) + \", you specified: \" + JSON.stringify(options)].join(\" \"));\n\t      }\n\t    }\n\t\n\t    function checkOverwrite(property, object, newValue, objectName) {\n\t      if (!_this.disableWarnings && object.hasOwnProperty(property)) {\n\t        console.warn([\"Attempting to overwrite \" + property + \" on \" + objectName + \" which is currently\", \"\" + JSON.stringify(object[property]) + \" with \" + JSON.stringify(newValue)].join(\" \"));\n\t      }\n\t    }\n\t\n\t    function getTemplateWrapper(name) {\n\t      return templateWrappersMap[name || defaultTemplateWrapperName];\n\t    }\n\t\n\t    function getTemplateWrapperByType(type) {\n\t      for (var name in templateWrappersMap) {\n\t        if (templateWrappersMap.hasOwnProperty(name)) {\n\t          if (templateWrappersMap[name].types && templateWrappersMap[name].types.indexOf(type) !== -1) {\n\t            return templateWrappersMap[name];\n\t          }\n\t        }\n\t      }\n\t    }\n\t\n\t  }\n\t  formlyConfig.$inject = [\"formlyUsabilityProvider\"];\n\t};\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.constant(\"formlyErrorAndWarningsUrlPrefix\", \"https://github.com/formly-js/angular-formly/wiki/Errors-and-Warnings#\");\n\t};\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar angular = __webpack_require__(1);\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.provider(\"formlyUsability\", function () {\n\t    var _this = this;\n\t    var errorsAndWarningsUrlPrefix = \"https://github.com/formly-js/angular-formly/wiki/Errors-and-Warnings#\";\n\t    angular.extend(this, {\n\t      getFormlyError: getFormlyError,\n\t      getFieldError: getFieldError,\n\t      checkWrapper: checkWrapper,\n\t      checkWrapperTemplate: checkWrapperTemplate,\n\t      $get: function () {\n\t        return _this;\n\t      }\n\t    });\n\t\n\t    function getFieldError(errorInfoSlug, message, field) {\n\t      return new Error(getErrorMessage(errorInfoSlug, message) + (\" Field definition: \" + angular.toJson(field)));\n\t    }\n\t\n\t    function getFormlyError(errorInfoSlug, message) {\n\t      if (!message) {\n\t        message = errorInfoSlug;\n\t        errorInfoSlug = null;\n\t      }\n\t      return new Error(getErrorMessage(errorInfoSlug, message));\n\t    }\n\t\n\t    function getErrorMessage(errorInfoSlug, message) {\n\t      var url = \"\";\n\t      if (errorInfoSlug !== null) {\n\t        url = \"\" + errorsAndWarningsUrlPrefix + \"\" + errorInfoSlug;\n\t      }\n\t      return \"Formly Error: \" + message + \". \" + url;\n\t    }\n\t\n\t    function checkWrapper(wrapper) {\n\t      if (wrapper.template && wrapper.url) {\n\t        throw getFormlyError(\"Template wrappers can only have a url or a template. \" + (\"This one provided both: \" + JSON.stringify(wrapper)));\n\t      }\n\t      if (!wrapper.template && !wrapper.url) {\n\t        throw getFormlyError(\"Template wrappers must have one of a url or a template. \" + (\"This one provided neither: \" + JSON.stringify(wrapper)));\n\t      }\n\t    }\n\t\n\t    function checkWrapperTemplate(template, additionalInfo) {\n\t      var formlyTransclude = \"<formly-transclude></formly-transclude>\";\n\t      if (template.indexOf(formlyTransclude) === -1) {\n\t        throw getFormlyError(\"Template wrapper templates must use \\\"\" + formlyTransclude + \"\\\" somewhere in them. \" + (\"This one does not have \\\"<formly-transclude></formly-transclude>\\\" in it: \" + template) + \"\\n\" + (\"Additional information: \" + JSON.stringify(additionalInfo)));\n\t      }\n\t    }\n\t  });\n\t};\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.constant(\"formlyVersion\", (\"3.0.0\"));\n\t};\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  __webpack_require__(9)(ngModule);\n\t  __webpack_require__(7)(ngModule);\n\t  __webpack_require__(10)(ngModule);\n\t  __webpack_require__(8)(ngModule);\n\t};\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar angular = __webpack_require__(1);\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.factory(\"formlyUtil\", function () {\n\t    return {\n\t      formlyEval: formlyEval,\n\t      getFieldId: getFieldId\n\t    };\n\t\n\t    function formlyEval(scope, expression, modelValue, viewValue) {\n\t      if (angular.isFunction(expression)) {\n\t        return expression(viewValue, modelValue, scope);\n\t      } else {\n\t        return scope.$eval(expression, {\n\t          $viewValue: viewValue,\n\t          $modelValue: modelValue\n\t        });\n\t      }\n\t    }\n\t\n\t    function getFieldId(formId, options, index) {\n\t      var type = options.type;\n\t      if (!type && options.template) {\n\t        type = \"template\";\n\t      } else if (!type && options.templateUrl) {\n\t        type = \"templateUrl\";\n\t      }\n\t\n\t      return [formId, type, options.key, index].join(\"_\");\n\t    }\n\t  });\n\t};\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _toArray = function (arr) { return Array.isArray(arr) ? arr : Array.from(arr); };\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.factory(\"formlyWarn\", [\"formlyConfig\", \"formlyErrorAndWarningsUrlPrefix\", \"$log\", function (formlyConfig, formlyErrorAndWarningsUrlPrefix, $log) {\n\t    return function warn() {\n\t      if (!formlyConfig.disableWarnings) {\n\t        var args = Array.prototype.slice.call(arguments);\n\t        var warnInfoSlug = args.shift();\n\t        args.unshift(\"Formly Warning:\");\n\t        args.push(\"\" + formlyErrorAndWarningsUrlPrefix + \"\" + warnInfoSlug);\n\t        $log.warn.apply($log, _toArray(args));\n\t      }\n\t    };\n\t  }]);\n\t};\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  __webpack_require__(12)(ngModule);\n\t  __webpack_require__(13)(ngModule);\n\t};\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = \"<ng-form class=\\\"formly\\\"\\n         name=\\\"form\\\"\\n         role=\\\"form\\\">\\n  <div formly-field\\n       ng-repeat=\\\"field in fields track by $index\\\"\\n       ng-if=\\\"!field.hide\\\"\\n       class=\\\"formly-field\\\"\\n       options=\\\"field\\\"\\n       model=\\\"field.model || model\\\"\\n       fields=\\\"fields\\\"\\n       form=\\\"form\\\"\\n       form-id=\\\"formId\\\"\\n       index=\\\"$index\\\">\\n  </div>\\n  <div ng-transclude></div>\\n</ng-form>\\n\"\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_16__;\n\n/***/ }\n/******/ ])\n});\n\n\n\n/** WEBPACK FOOTER **\n ** formly.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap be673afa7d4ed98dd505\n **/","\"use strict\";\n\nvar ngModuleName = \"formly\";\n\nvar angular = require(\"angular-fix\");\nvar ngModule = angular.module(ngModuleName, []);\n\nrequire(\"./providers\")(ngModule);\nrequire(\"./services\")(ngModule);\nrequire(\"./directives\")(ngModule);\n\nmodule.exports = ngModuleName;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./index.js\n ** module id = 0\n ** module chunks = 0\n **/","\"use strict\";\n\n// some versions of angular don't export the angular module properly,\n// so we get it from window in this case.\nvar angular = require(\"angular\");\nif (!angular.version) {\n  angular = window.angular;\n}\nmodule.exports = angular;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./angular-fix/index.js\n ** module id = 1\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  ngModule.directive(\"formlyCustomValidation\", [\"formlyUtil\", function (formlyUtil) {\n    return {\n      require: \"ngModel\",\n      link: function (scope, el, attrs, ctrl) {\n        var validators = scope.$eval(attrs.formlyCustomValidation);\n        if (!validators) {\n          return;\n        }\n\n        // setup watchers and parsers\n        var hasValidators = ctrl.hasOwnProperty(\"$validators\");\n        angular.forEach(validators, function (validator, name) {\n          if (hasValidators) {\n            var validatorCollection = validator.isAsync ? \"$asyncValidators\" : \"$validators\";\n            ctrl[validatorCollection][name] = function (modelValue, viewValue) {\n              return formlyUtil.formlyEval(scope, validator, modelValue, viewValue);\n            };\n          } else {\n            ctrl.$parsers.unshift(function (viewValue) {\n              var isValid = formlyUtil.formlyEval(scope, validator, ctrl.$modelValue, viewValue);\n              ctrl.$setValidity(name, isValid);\n              return viewValue;\n            });\n          }\n        });\n      }\n    };\n  }]);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./directives/formly-custom-validation.js\n ** module id = 2\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  ngModule.directive(\"formlyDynamicName\", function formlyDynamicName() {\n    return {\n      restrict: \"A\",\n      priority: 599, // one after ngIf\n      controller: [\"$scope\", \"$element\", \"$attrs\", function ($scope, $element, $attrs) {\n        $element.removeAttr(\"formly-dynamic-name\");\n        $attrs.$set(\"name\", $scope.$eval($attrs.formlyDynamicName));\n        delete $attrs.formlyDynamicName;\n      }]\n    };\n  });\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./directives/formly-dynamic-name.js\n ** module id = 3\n ** module chunks = 0\n **/","\"use strict\";\n\nvar angular = require(\"angular-fix\");\n\nmodule.exports = function (ngModule) {\n  ngModule.directive(\"formlyField\", formlyField);\n\n  formlyField.tests = ON_TEST ? require(\"./formly-field.test\")(ngModule) : null;\n\n  function formlyField($http, $q, $compile, $templateCache, formlyConfig, formlyUtil, formlyUsability, formlyWarn) {\n    return {\n      restrict: \"AE\",\n      transclude: true,\n      scope: {\n        options: \"=\",\n        model: \"=\",\n        formId: \"=?\",\n        index: \"=?\",\n        fields: \"=?\",\n        form: \"=?\"\n      },\n      controller: [\"$scope\", \"$interval\", function fieldController($scope, $interval) {\n        // set field id to link labels and fields\n        $scope.id = formlyUtil.getFieldId($scope.formId, $scope.options, $scope.index);\n\n        angular.extend($scope.options, {\n          // attach the key in case the formly-field directive is used directly\n          key: $scope.options.key || $scope.index || 0,\n          value: valueGetterSetter,\n          runExpressions: runExpressions,\n          modelOptions: {\n            getterSetter: true,\n            allowInvalid: true\n          }\n        });\n\n        // initalization\n        runExpressions();\n        if (!$scope.options.noFormControl) {\n          setFormControl();\n        }\n        if ($scope.options.model) {\n          $scope.$watch(\"options.model\", runExpressions, true);\n        }\n\n        // function definitions\n        function runExpressions() {\n          var field = $scope.options;\n          var currentValue = valueGetterSetter();\n          angular.forEach(field.expressionProperties, function runExpression(expression, prop) {\n            if (prop !== \"data\") {\n              field[prop] = formlyUtil.formlyEval($scope, expression, currentValue);\n            } else {\n              field.data = field.data || {};\n              angular.forEach(field.expressionProperties.data, function runExpression(dataExpression, dataProp) {\n                field.data[dataProp] = formlyUtil.formlyEval($scope, dataExpression, currentValue);\n              });\n            }\n          });\n        }\n\n        function valueGetterSetter(newVal) {\n          if (!$scope.model || !$scope.options.key) {\n            return;\n          }\n          if (angular.isDefined(newVal)) {\n            $scope.model[$scope.options.key] = newVal;\n          }\n          return $scope.model[$scope.options.key];\n        }\n\n        function setFormControl() {\n          var stopWaitingForDestroy;\n          var maxTime = 2000;\n          var intervalTime = 5;\n          var iterations = 0;\n          var interval = $interval(function () {\n            iterations++;\n            if (!angular.isDefined($scope.options.key)) {\n              return cleanUp();\n            }\n            var formControl = $scope.form && $scope.form[$scope.id];\n            if (formControl) {\n              $scope.options.formControl = formControl;\n              cleanUp();\n            } else if (intervalTime * iterations > maxTime) {\n              formlyWarn(\"couldnt-set-the-formcontrol-after-timems\", \"Couldn't set the formControl after \" + maxTime + \"ms\", $scope);\n              cleanUp();\n            }\n          }, intervalTime);\n          stopWaitingForDestroy = $scope.$on(\"$destroy\", cleanUp);\n\n          function cleanUp() {\n            stopWaitingForDestroy();\n            $interval.cancel(interval);\n          }\n        }\n      }],\n      link: function fieldLink(scope, el) {\n        apiCheck(scope.options);\n        getTemplate(scope.options).then(transcludeInWrapper(scope.options)).then(setElementTemplate);\n\n        function setElementTemplate(templateEl) {\n          el.html(asHtml(templateEl));\n          $compile(el.contents())(scope);\n        }\n      }\n    };\n\n    function asHtml(el) {\n      var wrapper = angular.element(\"<a></a>\");\n      return wrapper.append(el).html();\n    }\n\n\n    function getTemplate(options) {\n      var template = options.template || formlyConfig.getTemplate(options.type);\n      var templateUrl = options.templateUrl || formlyConfig.getTemplateUrl(options.type);\n      if (template) {\n        return $q.when(template);\n      } else if (templateUrl) {\n        var httpOptions = { cache: $templateCache };\n        return $http.get(templateUrl, httpOptions).then(function (response) {\n          return response.data;\n        })[\"catch\"](function (error) {\n          formlyWarn(\"problem-loading-template-for-templateurl\", \"Problem loading template for \" + templateUrl, error);\n        });\n      } else {\n        throw formlyUsability.getFieldError(\"template-type-type-not-supported\", \"template type '\" + options.type + \"' not supported. On element:\", options);\n      }\n    }\n\n    function transcludeInWrapper(options) {\n      var templateWrapper = getTemplateWrapperOption(options);\n\n      return function transcludeTemplate(template) {\n        if (!templateWrapper) {\n          return $q.when(angular.element(template));\n        }\n        formlyUsability.checkWrapper(templateWrapper);\n        if (templateWrapper.template) {\n          formlyUsability.checkWrapperTemplate(templateWrapper.template, templateWrapper);\n          return $q.when(doTransclusion(templateWrapper.template));\n        } else {\n          var httpOptions = { cache: $templateCache };\n          return $http.get(templateWrapper.url, httpOptions).then(function (response) {\n            var wrapper = response.data;\n            formlyUsability.checkWrapperTemplate(wrapper, templateWrapper);\n            return doTransclusion(wrapper);\n          })[\"catch\"](function (error) {\n            formlyWarn(\"proplem-loading-template-for-wrapper\", \"Problem loading template for wrapper\" + JSON.stringify(templateWrapper), error);\n          });\n        }\n\n        function doTransclusion(wrapper) {\n          var wrapperEl = angular.element(wrapper);\n          var transcludeEl = wrapperEl.find(\"formly-transclude\");\n          transcludeEl.replaceWith(template);\n          return wrapperEl;\n        }\n      };\n    }\n\n    function getTemplateWrapperOption(options) {\n      /* jshint maxcomplexity:6 */\n      var templateOption = options.wrapper;\n      // explicit null means no wrapper\n      if (templateOption === null) {\n        return \"\";\n      }\n      var templateWrapper = templateOption;\n      // nothing specified means use the default wrapper for the type\n      if (!templateOption) {\n        templateWrapper = formlyConfig.getTemplateWrapperByType(options.type) || formlyConfig.getTemplateWrapper();\n      } else if (typeof templateOption === \"string\") {\n        // string means it's a type\n        templateWrapper = formlyConfig.getTemplateWrapper(templateOption);\n      }\n      return templateWrapper;\n    }\n\n    function apiCheck(options) {\n      var templateOptions = getTemplateOptionsCount(options);\n      if (templateOptions === 0) {\n        throw formlyUsability.getFieldError(\"you-must-provide-one-of-type-template-or-templateurl-for-a-field\", \"You must provide one of type, template, or templateUrl for a field\", options);\n      } else if (templateOptions > 1) {\n        throw formlyUsability.getFieldError(\"you-must-only-provide-a-type-template-or-templateurl-for-a-field\", \"You must only provide a type, template, or templateUrl for a field\", options);\n      }\n\n      function getTemplateOptionsCount(options) {\n        var templateOptions = 0;\n        templateOptions += angular.isDefined(options.template) ? 1 : 0;\n        templateOptions += angular.isDefined(options.type) ? 1 : 0;\n        templateOptions += angular.isDefined(options.templateUrl) ? 1 : 0;\n        return templateOptions;\n      }\n    }\n  }\n  formlyField.$inject = [\"$http\", \"$q\", \"$compile\", \"$templateCache\", \"formlyConfig\", \"formlyUtil\", \"formlyUsability\", \"formlyWarn\"];\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./directives/formly-field.js\n ** module id = 4\n ** module chunks = 0\n **/","\"use strict\";\n\nvar _toArray = function (arr) { return Array.isArray(arr) ? arr : Array.from(arr); };\n\nvar _slice = Array.prototype.slice;\nvar angular = require(\"angular-fix\");\n\nmodule.exports = function (ngModule) {\n  ngModule.directive(\"formlyForm\", formlyForm);\n\n  formlyForm.tests = ON_TEST ? require(\"./formly-form.test\")(ngModule) : null;\n\n  function formlyForm(formlyUsability) {\n    var currentFormId = 1;\n    return {\n      restrict: \"E\",\n      template: require(\"./formly-form.html\"),\n      replace: true,\n      transclude: true,\n      scope: {\n        fields: \"=\",\n        model: \"=?\", // we'll do our own warning to help with migrations\n        form: \"=?\"\n      },\n      controller: [\"$scope\", function ($scope) {\n        $scope.formId = \"formly_\" + currentFormId++;\n\n        angular.forEach($scope.fields, attachKey); // attaches a key based on the index if a key isn't specified\n        angular.forEach($scope.fields, setupWatchers); // setup watchers for all fields\n\n        // watch the model and evaluate watch expressions that depend on it.\n        $scope.$watch(\"model\", function onResultUpdate(newResult) {\n          angular.forEach($scope.fields, function (field) {\n            /*jshint -W030 */\n            field.runExpressions && field.runExpressions(newResult);\n          });\n        }, true);\n\n        function attachKey(field, index) {\n          field.key = field.key || index || 0;\n        }\n\n        function setupWatchers(field, index) {\n          if (!angular.isDefined(field.watcher)) {\n            return;\n          }\n          var watchers = field.watcher;\n          if (!angular.isArray(watchers)) {\n            watchers = [watchers];\n          }\n          angular.forEach(watchers, function (watcher) {\n            if (!angular.isDefined(watcher.listener)) {\n              throw formlyUsability.getFieldError(\"all-field-watchers-must-have-a-listener\", \"All field watchers must have a listener\", field);\n            }\n            var watchExpression = getWatchExpression(watcher, field, index);\n            var watchListener = getWatchListener(watcher, field, index);\n\n            var type = watcher.type || \"$watch\";\n            watcher.stopWatching = $scope[type](watchExpression, watchListener, watcher.watchDeep);\n          });\n        }\n\n        function getWatchExpression(watcher, field, index) {\n          var watchExpression = watcher.expression || \"model['\" + field.key + \"']\";\n          if (angular.isFunction(watchExpression)) {\n            // wrap the field's watch expression so we can call it with the field as the first arg\n            // and the stop function as the last arg as a helper\n            var originalExpression = watchExpression;\n            watchExpression = function formlyWatchExpression() {\n              var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n              return originalExpression.apply(undefined, _toArray(args));\n            };\n            watchExpression.displayName = \"Formly Watch Expression for field for \" + field.key;\n          }\n          return watchExpression;\n        }\n\n        function getWatchListener(watcher, field, index) {\n          var watchListener = watcher.listener;\n          if (angular.isFunction(watchListener)) {\n            // wrap the field's watch listener so we can call it with the field as the first arg\n            // and the stop function as the last arg as a helper\n            var originalListener = watchListener;\n            watchListener = function formlyWatchListener() {\n              var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n              return originalListener.apply(undefined, _toArray(args));\n            };\n            watchListener.displayName = \"Formly Watch Listener for field for \" + field.key;\n          }\n          return watchListener;\n        }\n\n        function modifyArgs(watcher, index) {\n          for (var _len = arguments.length, originalArgs = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n            originalArgs[_key - 2] = arguments[_key];\n          }\n\n          return [$scope.fields[index]].concat(_toArray(originalArgs), [watcher.stopWatching]);\n        }\n      }],\n      link: function (scope, el, attrs) {\n        if (attrs.hasOwnProperty(\"result\")) {\n          throw formlyUsability.getFormlyError(\"The \\\"result\\\" attribute on a formly-form is no longer valid. Use \\\"model\\\" instead\");\n        }\n        if (attrs.name !== \"form\") {\n          // then they specified their own name\n          throw formlyUsability.getFormlyError(\"The \\\"name\\\" attribute on a formly-form is no longer valid. Use \\\"form\\\" instead\");\n        }\n        if (!attrs.hasOwnProperty(\"model\") || !scope.model) {\n          throw formlyUsability.getFormlyError(\"The \\\"model\\\" attribute is required on a formly-form.\");\n        }\n      }\n    };\n  }\n  formlyForm.$inject = [\"formlyUsability\"];\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./directives/formly-form.js\n ** module id = 5\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  require(\"./formly-custom-validation\")(ngModule);\n  require(\"./formly-dynamic-name\")(ngModule);\n  require(\"./formly-field\")(ngModule);\n  require(\"./formly-form\")(ngModule);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./directives/index.js\n ** module id = 6\n ** module chunks = 0\n **/","\"use strict\";\n\nvar angular = require(\"angular-fix\");\n\nmodule.exports = function (ngModule) {\n  ngModule.provider(\"formlyConfig\", formlyConfig);\n\n  formlyConfig.tests = ON_TEST ? require(\"./formlyConfig.test\")(ngModule) : null;\n\n  function formlyConfig(formlyUsabilityProvider) {\n    var _this2 = this;\n\n\n    var templateUrlMap = {};\n    var templateMap = {};\n    var templateWrappersMap = {};\n    var defaultTemplateWrapperName = \"default\";\n    var _this = this;\n\n    angular.extend(this, {\n      getTemplateUrl: getTemplateUrl,\n      setTemplateUrl: setTemplateUrl,\n      getTemplate: getTemplate,\n      setTemplate: setTemplate,\n      setTemplateWrapper: setTemplateWrapper,\n      getTemplateWrapper: getTemplateWrapper,\n      getTemplateWrapperByType: getTemplateWrapperByType,\n      disableWarnings: false,\n      $get: function () {\n        return _this2;\n      }\n    });\n\n    function setTemplateUrl(name, templateUrl) {\n      validateSetterApi(name, templateUrl, false, arguments);\n      if (typeof name === \"string\") {\n        checkOverwrite(name, templateUrlMap, templateUrl, \"templateUrls\");\n        templateUrlMap[name] = templateUrl;\n      } else {\n        angular.forEach(name, function (templateUrl, name) {\n          setTemplateUrl(name, templateUrl);\n        });\n      }\n    }\n\n    function getTemplateUrl(type) {\n      return templateUrlMap[type];\n    }\n\n    function setTemplate(name, template) {\n      validateSetterApi(name, template, false, arguments);\n      if (typeof name === \"string\") {\n        checkOverwrite(name, templateMap, template, \"templates\");\n        templateMap[name] = template;\n      } else {\n        angular.forEach(name, function (template, name) {\n          setTemplate(name, template);\n        });\n      }\n    }\n\n    function getTemplate(type) {\n      return templateMap[type];\n    }\n\n    function validateSetterApi(name, templateOrUrl, isUrl, args) {\n      var templatesName = isUrl ? \"templateUrls\" : \"templates\";\n      if (angular.isObject(name)) {\n        return;\n      }\n      if (!angular.isString(name)) {\n        throw formlyUsabilityProvider.getFormlyError(null, \"You must provide a name for all \" + templatesName + \". You provided: \" + JSON.stringify(args));\n      } else if (!angular.isString(templateOrUrl)) {\n        throw formlyUsabilityProvider.getFormlyError(null, \"You must provide a string for all \" + templatesName + \". You provided: \" + JSON.stringify(args));\n      }\n    }\n\n    function setTemplateWrapper(options, name) {\n      if (angular.isArray(options)) {\n        return options.map(setTemplateWrapper);\n      } else if (angular.isObject(options)) {\n        options.types = getOptionsTypes(options);\n        options.name = getOptionsName(options, name);\n        checkTemplateWrapperAPI(options);\n        templateWrappersMap[options.name] = options;\n        return options;\n      } else if (angular.isString(options)) {\n        return setTemplateWrapper({\n          template: options,\n          name: name\n        });\n      }\n    }\n\n    function getOptionsTypes(options) {\n      if (angular.isString(options.types)) {\n        return [options.types];\n      }\n      if (!angular.isDefined(options.types)) {\n        return [];\n      } else {\n        return options.types;\n      }\n    }\n\n    function getOptionsName(options, name) {\n      return options.name || name || options.types.join(\" \") || defaultTemplateWrapperName;\n    }\n\n    function checkTemplateWrapperAPI(options) {\n      formlyUsabilityProvider.checkWrapper(options);\n      if (options.template) {\n        formlyUsabilityProvider.checkWrapperTemplate(options.template, options);\n      }\n      checkOverwrite(options.name, templateWrappersMap, options, \"templateWrappers\");\n      checkTemplateWrapperTypes(options);\n    }\n\n    function checkTemplateWrapperTypes(options) {\n      var shouldThrow = !angular.isArray(options.types) || !options.types.every(angular.isString);\n      if (shouldThrow) {\n        throw formlyUsabilityProvider.getFormlyError(\"Attempted to create a template wrapper with types that is not a string or an array of strings\");\n      }\n      var wrapperWithSameType = options.types.some(getTemplateWrapperByType);\n      if (wrapperWithSameType) {\n        throw formlyUsabilityProvider.getFormlyError([\"Attempted to create a template wrapper with types that have already been specified for another template.\", \"Original wrapper: \" + JSON.stringify(wrapperWithSameType) + \", you specified: \" + JSON.stringify(options)].join(\" \"));\n      }\n    }\n\n    function checkOverwrite(property, object, newValue, objectName) {\n      if (!_this.disableWarnings && object.hasOwnProperty(property)) {\n        console.warn([\"Attempting to overwrite \" + property + \" on \" + objectName + \" which is currently\", \"\" + JSON.stringify(object[property]) + \" with \" + JSON.stringify(newValue)].join(\" \"));\n      }\n    }\n\n    function getTemplateWrapper(name) {\n      return templateWrappersMap[name || defaultTemplateWrapperName];\n    }\n\n    function getTemplateWrapperByType(type) {\n      for (var name in templateWrappersMap) {\n        if (templateWrappersMap.hasOwnProperty(name)) {\n          if (templateWrappersMap[name].types && templateWrappersMap[name].types.indexOf(type) !== -1) {\n            return templateWrappersMap[name];\n          }\n        }\n      }\n    }\n\n  }\n  formlyConfig.$inject = [\"formlyUsabilityProvider\"];\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./providers/formlyConfig.js\n ** module id = 7\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  ngModule.constant(\"formlyErrorAndWarningsUrlPrefix\", \"https://github.com/formly-js/angular-formly/wiki/Errors-and-Warnings#\");\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./providers/formlyErrorAndWarningsUrlPrefix.js\n ** module id = 8\n ** module chunks = 0\n **/","\"use strict\";\n\nvar angular = require(\"angular-fix\");\n\nmodule.exports = function (ngModule) {\n  ngModule.provider(\"formlyUsability\", function () {\n    var _this = this;\n    var errorsAndWarningsUrlPrefix = \"https://github.com/formly-js/angular-formly/wiki/Errors-and-Warnings#\";\n    angular.extend(this, {\n      getFormlyError: getFormlyError,\n      getFieldError: getFieldError,\n      checkWrapper: checkWrapper,\n      checkWrapperTemplate: checkWrapperTemplate,\n      $get: function () {\n        return _this;\n      }\n    });\n\n    function getFieldError(errorInfoSlug, message, field) {\n      return new Error(getErrorMessage(errorInfoSlug, message) + (\" Field definition: \" + angular.toJson(field)));\n    }\n\n    function getFormlyError(errorInfoSlug, message) {\n      if (!message) {\n        message = errorInfoSlug;\n        errorInfoSlug = null;\n      }\n      return new Error(getErrorMessage(errorInfoSlug, message));\n    }\n\n    function getErrorMessage(errorInfoSlug, message) {\n      var url = \"\";\n      if (errorInfoSlug !== null) {\n        url = \"\" + errorsAndWarningsUrlPrefix + \"\" + errorInfoSlug;\n      }\n      return \"Formly Error: \" + message + \". \" + url;\n    }\n\n    function checkWrapper(wrapper) {\n      if (wrapper.template && wrapper.url) {\n        throw getFormlyError(\"Template wrappers can only have a url or a template. \" + (\"This one provided both: \" + JSON.stringify(wrapper)));\n      }\n      if (!wrapper.template && !wrapper.url) {\n        throw getFormlyError(\"Template wrappers must have one of a url or a template. \" + (\"This one provided neither: \" + JSON.stringify(wrapper)));\n      }\n    }\n\n    function checkWrapperTemplate(template, additionalInfo) {\n      var formlyTransclude = \"<formly-transclude></formly-transclude>\";\n      if (template.indexOf(formlyTransclude) === -1) {\n        throw getFormlyError(\"Template wrapper templates must use \\\"\" + formlyTransclude + \"\\\" somewhere in them. \" + (\"This one does not have \\\"<formly-transclude></formly-transclude>\\\" in it: \" + template) + \"\\n\" + (\"Additional information: \" + JSON.stringify(additionalInfo)));\n      }\n    }\n  });\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./providers/formlyUsability.js\n ** module id = 9\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  ngModule.constant(\"formlyVersion\", VERSION);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./providers/formlyVersion.js\n ** module id = 10\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  require(\"./formlyUsability\")(ngModule);\n  require(\"./formlyConfig\")(ngModule);\n  require(\"./formlyVersion\")(ngModule);\n  require(\"./formlyErrorAndWarningsUrlPrefix\")(ngModule);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./providers/index.js\n ** module id = 11\n ** module chunks = 0\n **/","\"use strict\";\n\nvar angular = require(\"angular-fix\");\n\nmodule.exports = function (ngModule) {\n  ngModule.factory(\"formlyUtil\", function () {\n    return {\n      formlyEval: formlyEval,\n      getFieldId: getFieldId\n    };\n\n    function formlyEval(scope, expression, modelValue, viewValue) {\n      if (angular.isFunction(expression)) {\n        return expression(viewValue, modelValue, scope);\n      } else {\n        return scope.$eval(expression, {\n          $viewValue: viewValue,\n          $modelValue: modelValue\n        });\n      }\n    }\n\n    function getFieldId(formId, options, index) {\n      var type = options.type;\n      if (!type && options.template) {\n        type = \"template\";\n      } else if (!type && options.templateUrl) {\n        type = \"templateUrl\";\n      }\n\n      return [formId, type, options.key, index].join(\"_\");\n    }\n  });\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./services/formlyUtil.js\n ** module id = 12\n ** module chunks = 0\n **/","\"use strict\";\n\nvar _toArray = function (arr) { return Array.isArray(arr) ? arr : Array.from(arr); };\n\nmodule.exports = function (ngModule) {\n  ngModule.factory(\"formlyWarn\", [\"formlyConfig\", \"formlyErrorAndWarningsUrlPrefix\", \"$log\", function (formlyConfig, formlyErrorAndWarningsUrlPrefix, $log) {\n    return function warn() {\n      if (!formlyConfig.disableWarnings) {\n        var args = Array.prototype.slice.call(arguments);\n        var warnInfoSlug = args.shift();\n        args.unshift(\"Formly Warning:\");\n        args.push(\"\" + formlyErrorAndWarningsUrlPrefix + \"\" + warnInfoSlug);\n        $log.warn.apply($log, _toArray(args));\n      }\n    };\n  }]);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./services/formlyWarn.js\n ** module id = 13\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function (ngModule) {\n  require(\"./formlyUtil\")(ngModule);\n  require(\"./formlyWarn\")(ngModule);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./services/index.js\n ** module id = 14\n ** module chunks = 0\n **/","module.exports = \"<ng-form class=\\\"formly\\\"\\n         name=\\\"form\\\"\\n         role=\\\"form\\\">\\n  <div formly-field\\n       ng-repeat=\\\"field in fields track by $index\\\"\\n       ng-if=\\\"!field.hide\\\"\\n       class=\\\"formly-field\\\"\\n       options=\\\"field\\\"\\n       model=\\\"field.model || model\\\"\\n       fields=\\\"fields\\\"\\n       form=\\\"form\\\"\\n       form-id=\\\"formId\\\"\\n       index=\\\"$index\\\">\\n  </div>\\n  <div ng-transclude></div>\\n</ng-form>\\n\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./directives/formly-form.html\n ** module id = 15\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_16__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"angular\"\n ** module id = 16\n ** module chunks = 0\n **/"],"sourceRoot":"","file":"formly.min.js"}